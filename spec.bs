<pre class="metadata">
Title: URLPattern API
Shortname: urlpattern
Repository: WICG/urlpattern
Inline Github Issues: true
Group: WICG
Status: CG-DRAFT
Level: 1
URL: https://wicg.github.io/urlpattern/
Boilerplate: omit conformance, omit feedback-header
Editor: Ben Kelly, Google https://www.google.com/, wanderview@chromium.org
Abstract: The URLPattern API provides a web platform primitive for matching URLs based on a convenient pattern syntax.
!Participate: <a href="https://github.com/WICG/urlpattern">GitHub WICG/urlpattern</a> (<a href="https://github.com/WICG/urlpattern/issues/new">new issue</a>, <a href="https://github.com/WICG/urlpattern/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/WICG/urlpattern/commits/master/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
Markup Shorthands: markdown yes
</pre>

<pre class="link-defaults">
spec:infra; type:dfn; text:list
spec:url; type:dfn; for:/; text:url
spec:webidl; type:dfn; text:record
</pre>

<pre class="anchors">
spec: ECMASCRIPT; urlPrefix: https://tc39.es/ecma262/
  type: abstract-op
    text: Get; url: #sec-get-o-p
    text: RegExpBuiltinExec; url: #sec-regexpbuiltinexec
    text: ToString; url: #sec-tostring
  type: interface
    text: RegExp; url: #sec-regexp-regular-expression-objects
spec: url; urlPrefix: https://url.spec.whatwg.org/
  type: dfn
    text: cannot be a base URL path state; url: #cannot-be-a-base-url-path-state
    text: fragment state; url: #fragment-state
    text: hostname state; url: #hostname-state
    text: path start state; url: #path-start-state
    text: port state; url: #port-state
    text: query state; url: #query-state
    text: scheme start state; url: #scheme-start-state
</pre>

<style>
.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

dfn var {
  font-style: italic;
}

table {
  margin: 1em 0;
}

/* WHATWG-style <hr>s, instead of WICG-style. Specific selector is necessary to override WICG styles. */
:not(.head) > :not(.head) + hr {
  display: block;
  background: none;
  border: none;
  padding: 0;
  margin: 3em 0;
  height: auto;
}
:not(.head) > :not(.head) + hr::before {
  content: none;
}

/* domintro from https://resources.whatwg.org/standard.css */
.domintro {
  position: relative;
  color: green;
  background: #DDFFDD;
  margin: 2.5em 0 2em 0;
  padding: 1.5em 1em 0.5em 2em;
}

.domintro dt, .domintro dt * {
  color: black;
  font-size: inherit;
}
.domintro dd {
  margin: 0.5em 0 1em 2em; padding: 0;
}
.domintro dd p {
  margin: 0.5em 0;
}
.domintro::before {
  content: 'For web developers (non-normative)';
  background: green;
  color: white;
  padding: 0.15em 0.25em;
  font-style: normal;
  position: absolute;
  top: -0.8em;
  left: -0.8em;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>

<h2 id=urlpattern-class>The {{URLPattern}} class </h2>

<xmp class="idl">
typedef (USVString or URLPatternInit) URLPatternInput;

[Exposed=(Window,Worker)]
interface URLPattern {
  constructor(URLPatternInput input, optional USVString baseURL);

  boolean test(URLPatternInput input, optional USVString baseURL);

  URLPatternResult? exec(URLPatternInput input, optional USVString baseURL);

  readonly attribute USVString protocol;
  readonly attribute USVString username;
  readonly attribute USVString password;
  readonly attribute USVString hostname;
  readonly attribute USVString port;
  readonly attribute USVString pathname;
  readonly attribute USVString search;
  readonly attribute USVString hash;
};

dictionary URLPatternInit {
  USVString protocol;
  USVString username;
  USVString password;
  USVString hostname;
  USVString port;
  USVString pathname;
  USVString search;
  USVString hash;
  USVString baseURL;
};

dictionary URLPatternResult {
  sequence<URLPatternInput> inputs;

  URLPatternComponentResult protocol;
  URLPatternComponentResult username;
  URLPatternComponentResult password;
  URLPatternComponentResult hostname;
  URLPatternComponentResult port;
  URLPatternComponentResult pathname;
  URLPatternComponentResult search;
  URLPatternComponentResult hash;
};

dictionary URLPatternComponentResult {
  USVString input;
  record<USVString, USVString> groups;
};
</xmp>

Each {{URLPattern}} object has an associated <dfn for=URLPattern>protocol component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>username component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>password component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>hostname component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>port component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>pathname component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>search component</dfn>, a [=component=], initially null.

Each {{URLPattern}} object has an associated <dfn for=URLPattern>hash component</dfn>, a [=component=], initially null.

<dl class="domintro non-normative">
  <dt><code>{{URLPattern}} . {{URLPattern/protocol}}</code>
  <dd>
    <p>The normalized protocol pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/username}}</code>
  <dd>
    <p>The normalized username pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/password}}</code>
  <dd>
    <p>The normalized password pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/hostname}}</code>
  <dd>
    <p>The normalized hostname pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/port}}</code>
  <dd>
    <p>The normalized port pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/pathname}}</code>
  <dd>
    <p>The normalized pathname pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/search}}</code>
  <dd>
    <p>The normalized search pattern string.
  </dd>

  <dt><code>{{URLPattern}} . {{URLPattern/hash}}</code>
  <dd>
    <p>The normalized hash pattern string.
  </dd>
</dl>

<div algorithm>
  The <dfn attribute for="URLPattern">protocol</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/protocol component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">username</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/username component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">password</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/password component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">hostname</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/hostname component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">port</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/port component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">pathname</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/pathname component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">search</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/search component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn attribute for="URLPattern">hash</dfn> getter steps are:

  1. Return [=this=]'s [=URLPattern/hash component=]'s [=component/pattern string=].
</div>

<div algorithm>
  The <dfn method for="URLPattern">test(|input|, |baseURL|)</dfn> method steps are:

  1. Let |result| be the result of [=match=] given [=this=], |input|, and |baseURL| if given.
  1. If |result| is null, return false.
  1. Return true.
</div>

<div algorithm>
  The <dfn method for="URLPattern">exec(|input|, |baseURL|)</dfn> method steps are:

  1. Return the result of [=match=] given [=this=], |input|, and |baseURL| if given.
</div>

<div algorithm>
  To perform a <dfn>match</dfn> given a {{URLPattern}} |urlpattern|, a {{URLPatternInput}} |input|, and an optional string |baseURLString|:

  1. Let |protocol| be the empty string.
  1. Let |username| be the empty string.
  1. Let |password| be the empty string.
  1. Let |hostname| be the empty string.
  1. Let |port| be the empty string.
  1. Let |pathname| be the empty string.
  1. Let |search| be the empty string.
  1. Let |hash| be the empty string.
  1. Let |inputs| be an empty [=list=].
  1. [=list/Append=] |input| to |inputs|.
  1. If |input| is a {{URLPatternInit}} then:
    1. If |baseURLString| was given, throw a {{TypeError}}.
    1. Let |applyResult| be the result of [=process a URLPatternInit=] given |input|, "url", |protocol|, |username|, |password|, |hostname|, |port|, |pathname|, |search|, and |hash|. If this throws an exception, catch it, and return null.
    1. Set |protocol| to |applyResult|["{{URLPatternInit/protocol}}"].
    1. Set |username| to |applyResult|["{{URLPatternInit/username}}"].
    1. Set |password| to |applyResult|["{{URLPatternInit/password}}"].
    1. Set |hostname| to |applyResult|["{{URLPatternInit/hostname}}"].
    1. Set |port| to |applyResult|["{{URLPatternInit/port}}"].
    1. Set |pathname| to |applyResult|["{{URLPatternInit/pathname}}"].
    1. Set |search| to |applyResult|["{{URLPatternInit/search}}"].
    1. Set |hash| to |applyResult|["{{URLPatternInit/hash}}"].
  1. Else:
    1. Let |baseURL| be null.
    1. If |baseURLString| was given, then:
      1. Set |baseURL| to the result of [=URL parser|parsing=] |baseURLString|.
      1. If |baseURL| is failure, return null.
      1. [=list/Append=] |baseURL| to |inputs|.
    1. Let |url| be the result of [=URL parser|parsing=] |input| given |baseURL|.
    1. If |url| is failure, return null.
    1. Set |protocol| to |url|'s [=url/scheme=].
    1. Set |username| to |url|'s [=url/username=].
    1. Set |password| to |url|'s [=url/password=].
    1. Set |hostname| to |url|'s [=url/host=] or the empty string if the value is null.
    1. Set |port| to |url|'s [=url/port=] or the empty string if the value is null.
    1. Set |pathname| to |url|'s [=url/API pathname string=].
    1. Set |search| to |url|'s [=url/query=] or the empty string if the value is null.
    1. Set |hash| to |url|'s [=url/fragment=] or the empty string if the value is null.
  1. Let |protocolExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/protocol component=]'s [=component/regular expression=], |protocol|).
  1. Let |usernameExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/username component=]'s [=component/regular expression=], |username|).
  1. Let |passwordExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/password component=]'s [=component/regular expression=], |password|).
  1. Let |hostnameExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/hostname component=]'s [=component/regular expression=], |hostname|).
  1. Let |portExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/port component=]'s [=component/regular expression=], |port|).
  1. Let |pathnameExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/pathname component=]'s [=component/regular expression=], |pathname|).
  1. Let |searchExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/search component=]'s [=component/regular expression=], |search|).
  1. Let |hashExecResult| be [$RegExpBuiltinExec$](|urlpattern|'s [=URLPattern/hash component=]'s [=component/regular expression=], |hash|).
  1. If |protocolExecResult|, |usernameExecResult|, |passwordExecResult|, |hostnameExecResult|, |portExecResult|, |pathnameExecResult|, |searchExecResult|, or |hashExecResult| are null then return null.
  1. Let |result| be a new {{URLPatternResult}}.
  1. Set |result|["{{URLPatternResult/inputs}}"] to |inputs|.
  1. Set |result|["{{URLPatternResult/protocol}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/protocol component=], |protocol|, and |protocolExecResult|.
  1. Set |result|["{{URLPatternResult/username}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/username component=], |username|, and |usernameExecResult|.
  1. Set |result|["{{URLPatternResult/password}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/password component=], |password|, and |passwordExecResult|.
  1. Set |result|["{{URLPatternResult/hostname}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/hostname component=], |hostname|, and |hostnameExecResult|.
  1. Set |result|["{{URLPatternResult/port}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/port component=], |port|, and |portExecResult|.
  1. Set |result|["{{URLPatternResult/pathname}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/pathname component=], |pathname|, and |pathnameExecResult|.
  1. Set |result|["{{URLPatternResult/search}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/search component=], |search|, and |searchExecResult|.
  1. Set |result|["{{URLPatternResult/hash}}"] to the result of [=creating a component match result=] given |urlpattern|'s [=URLPattern/hash component=], |hash|, and |hashExecResult|.
  1. Return |result|.
</div>

<div algorithm>
  To <dfn>process a URLPatternInit</dfn> given a {{URLPatternInit}} |init|, a string |type|, a string |protocol|, a string |username|, a string |password|, a string |hostname|, a string |port|, a string |pathname|, a string |search|, and a string |hash|:

  1. Let |result| be the result of creating a new {{URLPatternInit}}.
  1. Set |result|["{{URLPatternInit/protocol}}"] to |protocol|.
  1. Set |result|["{{URLPatternInit/username}}"] to |username|.
  1. Set |result|["{{URLPatternInit/password}}"] to |password|.
  1. Set |result|["{{URLPatternInit/hostname}}"] to |hostname|.
  1. Set |result|["{{URLPatternInit/port}}"] to |port|.
  1. Set |result|["{{URLPatternInit/pathname}}"] to |pathname|.
  1. Set |result|["{{URLPatternInit/search}}"] to |search|.
  1. Set |result|["{{URLPatternInit/hash}}"] to |hash|.
  1. If |init|["{{URLPatternInit/baseURL}}"] is not null:
    1. Let |baseURL| be the result of [=URL parser|parsing=] |init|["{{URLPatternInit/baseURL}}"].
    1. If |baseURL| is failure, then throw a {{TypeError}}.
    1. Set |result|["{{URLPatternInit/protocol}}"] to |baseURL|'s [=url/scheme=].
    1. Set |result|["{{URLPatternInit/username}}"] to |baseURL|'s [=url/username=].
    1. Set |result|["{{URLPatternInit/password}}"] to |baseURL|'s [=url/password=].
    1. Set |result|["{{URLPatternInit/hostname}}"] to |baseURL|'s [=url/host=] or the empty string if the value is null.
    1. Set |result|["{{URLPatternInit/port}}"] to |baseURL|'s [=url/port=] or the empty string if the value is null.
    1. Set |result|["{{URLPatternInit/pathname}}"] to |baseURL|'s [=url/API pathname string=].
    1. Set |result|["{{URLPatternInit/search}}"] to |baseURL|'s [=url/query=] or the empty string if the value is null.
    1. Set |result|["{{URLPatternInit/hash}}"] to |baseURL|'s [=url/fragment=] or the empty string if the value is null.
  1. If |init|["{{URLPatternInit/protocol}}"] is not null then set |result|["{{URLPatternInit/protocol}}"] to the result of [=canonicalize protocol=] given |init|["{{URLPatternInit/protocol}}"] and |type|.
  1. If |init|["{{URLPatternInit/username}}"] is not null then set |result|["{{URLPatternInit/username}}"] to the result of [=canonicalize username=] given |init|["{{URLPatternInit/username}}"] and |type|.
  1. If |init|["{{URLPatternInit/password}}"] is not null then set |result|["{{URLPatternInit/password}}"] to the result of [=canonicalize password=] given |init|["{{URLPatternInit/password}}"] and |type|.
  1. If |init|["{{URLPatternInit/hostname}}"] is not null then set |result|["{{URLPatternInit/hostname}}"] to the result of [=canonicalize hostname=] given |init|["{{URLPatternInit/hostname}}"] and |type|.
  1. If |init|["{{URLPatternInit/port}}"] is not null then set |result|["{{URLPatternInit/port}}"] to the result of [=canonicalize port=] given |init|["{{URLPatternInit/port}}"] and |type|.
  1. If |init|["{{URLPatternInit/pathname}}"] is not null then set |result|["{{URLPatternInit/pathname}}"] to the result of [=canonicalize pathname=] given |init|["{{URLPatternInit/pathname}}"] and |type|.
  1. If |init|["{{URLPatternInit/search}}"] is not null then set |result|["{{URLPatternInit/search}}"] to the result of [=canonicalize search=] given |init|["{{URLPatternInit/search}}"] and |type|.
  1. If |init|["{{URLPatternInit/hash}}"] is not null then set |result|["{{URLPatternInit/hash}}"] to the result of [=canonicalize hash=] given |init|["{{URLPatternInit/hash}}"] and |type|.
  1. Return |result|.
</div>

<div algorithm>
  To <dfn>create a component match result</dfn> given a [=component=] |component|, a string |input|, and an array representing the output of [$RegExpBuiltinExec$] |execResult|:

  1. Let |result| be a new {{URLPatternComponentResult}}.
  1. Set |result|["{{URLPatternComponentResult/input}}"] to |input|.
  1. Let |groups| be a <code>[=record=]<{{USVString}}, {{USVString}}></code>.
  1. Let |index| be 1.
  1. While |index| is less than [$Get$](|execResult|, "`length`"):
    1. Let |name| be |component|'s [=component/group name list=][|index| &minus; 1].
    1. Let |value| be [$Get$](|execResult|, [$ToString$](|index|)).
    1. Set |groups|[|name|] to |value|.
  1. Set |result|["{{URLPatternComponentResult/groups}}"] to |groups|.
  1. Return |result|.
</div>

<div algorithm>
  To <dfn>canonicalize protocol</dfn> given a string |value| and a string |type|:

  1. Let |strippedValue| be the given |value| with a single trailing U+003A (:) removed, if any.
  1. If |type| is "pattern" then return |strippedValue|.
  1. Let |dummyURL| be a new [=url=] record.
  1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |strippedValue|, followed by "`://dummy.test`", with |dummyURL| as [=basic URL parser/url=].
  1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Return |dummyURL|'s [=url/scheme=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize username</dfn> given a string |value| and a string |type|:

  1. If |type| is "pattern" then return |value|.
  1. Let |dummyURL| be a new [=url=] record.
  1. [=Set the username=] given |dummyURL| and |value|.
  1. Return |dummyURL|'s [=url/username=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize password</dfn> given a string |value| and a string |type|:

  1. If |type| is "pattern" then return |value|.
  1. Let |dummyURL| be a new [=url=] record.
  1. [=Set the password=] given |dummyURL| and |value|.
  1. Return |dummyURL|'s [=url/password=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize hostname</dfn> given a string |value| and a string |type|:

  1. If |type| is "pattern" then return |value|.
  1. Let |dummyURL| be a new [=url=] record.
  1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |value| with |dummyURL| as [=basic URL parser/url=] and [=hostname state=] as [=basic URL parser/state override=].
  1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Return |dummyURL|'s [=url/host=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize port</dfn> given a string |portValue|, a string |protocolValue|, and a string |type|:

  1. If |type| is "pattern" then return |portValue|.
  1. Let |dummyURL| be a new [=url=] record.
  1. Set |dummyURL|'s [=url/scheme=] to |protocolValue|.
  1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |portValue| with |dummyURL| as [=basic URL parser/url=] and [=port state=] as [=basic URL parser/state override=].
  1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Return |dummyURL|'s [=url/port=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize pathname</dfn> given a string |pathnameValue|, a string |protocolValue|, and a string |type|:

  1. If |type| is "pattern" then return |pathnameValue|.
  1. Let |dummyURL| be a new [=url=] record.
  1. If |protocolValue| is null or the empty string, then set |protocolValue| to "https".
  1. Set |dummyURL|'s [=url/scheme=] to |protocolValue|.
  1. If |dummyURL| [=is special=], then:
    1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |pathnameValue| with |dummyURL| as [=basic URL parser/url=] and [=path start state=] as [=basic URL parser/state override=].
    1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Else:
    1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |pathnameValue| with |dummyURL| as [=basic URL parser/url=] and [=cannot be a base URL path state=] as [=basic URL parser/state override=].
    1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Return |dummyURL|'s [=url/path=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize search</dfn> given a string |value| and a string |type|:

  1. Let |strippedValue| be the given |value| with a single leading U+003F (?) removed, if any.
  1. If |type| is "pattern" then return |strippedValue|.
  1. Let |dummyURL| be a new [=url=] record.
  1. Set |dummyURL|'s [=url/query=] to the empty string.
  1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |strippedValue| with |dummyURL| as [=basic URL parser/url=] and [=query state=] as [=basic URL parser/state override=].
  1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Return |dummyURL|'s [=url/query=].
</div algorithm>

<div algorithm>
  To <dfn>canonicalize hash</dfn> given a string |value| and a string |type|:

  1. Let |strippedValue| be the given |value| with a single leading U+0023 (#) removed, if any.
  1. If |type| is "pattern" then return |strippedValue|.
  1. Let |dummyURL| be a new [=url=] record.
  1. Set |dummyURL|'s [=url/fragment=] to the empty string.
  1. Let |parseResult| be the result of [=Basic URL parser|URL parsing=] |strippedValue| with |dummyURL| as [=basic URL parser/url=] and [=fragment state=] as [=basic URL parser/state override=].
  1. If |parseResult| is failure, then throw a {{TypeError}}.
  1. Return |dummyURL|'s [=url/fragment=].
</div algorithm>

<h2 id=components>Components</h2>

A {{URLPattern}} is associated with multiple <dfn>component</dfn> [=structs=].

A [=component=] has an associated <dfn for=component>pattern string</dfn>, a string, initially null.

A [=component=] has an associated <dfn for=component>regular expression</dfn>, a {{RegExp}}, initially null.

A [=component=] has an associated <dfn for=component>group name list</dfn>, an array of strings, initially an empty array.

<h2 id=patching>Patching</h2>

This spec depends on factoring out the {{URL/pathname}} getter steps into a new exported algorithm, <dfn for=url>API pathname string</dfn>, that operates on a URL record.
